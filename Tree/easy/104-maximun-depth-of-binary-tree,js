var maxDepth = function(root) {
    if(root == null) return 0;

    const left = maxDepth(root.left);
    const right = maxDepth(root.right);

    return Math.max(left, right) + 1;
};

var maxDepth = function(root, depth = 0) {
    if (!root) return depth;
    depth++;
    return Math.max(maxDepth(root.left, depth), maxDepth(root.right, depth), depth);
};

function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}

// create tree with arr input
function createTreeFromArray(arr) {
    if (!arr.length) return null;

    // DFS: deep-first search
    function dfs(level) {
        if (level >= arr.length || arr[level] === null) return null;

        // create current root
        let node = new TreeNode(arr[level]);

        // create left and right recursively
        node.left = dfs(2 * level + 1);
        node.right = dfs(2 * level + 2);

        return node;
    }

    // create tree from root node
    return dfs(0);
}

let arr = [3,9,20,null,null,15,7];
let root = createTreeFromArray(arr);
maxDepth(root);